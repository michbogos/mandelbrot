#version 450
#extension GL_EXT_shader_atomic_float: enable

#define product(a, b) vec2(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x)
#define conjugate(a) vec2(a.x,-a.y)
#define divide(a, b) vec2(((a.x*b.x+a.y*b.y)/(b.x*b.x+b.y*b.y)),((a.y*b.x-a.x*b.y)/(b.x*b.x+b.y*b.y)))

// The execution structure
layout (local_size_x = 32,local_size_y = 32, local_size_z = 1) in;

// The buffers are provided via the tensors
layout(binding = 0) buffer bufOut { float o[]; };
layout(push_constant) uniform constants {
            uint width;
            uint height;
} pc;

void main() {
    float aspectRatio = float(pc.width)/float(pc.height);
    uint globX = gl_GlobalInvocationID.x;
    uint globY = gl_GlobalInvocationID.y;
    uint locX =  gl_LocalInvocationID.x;
    uint locY = gl_LocalInvocationID.y;
    uint x = globX;
    uint y = globY;
    if(globX >= pc.width || globY >= pc.height){
        return;
    }
    uint iterations = 0;
    vec2 c = vec2((x/float(pc.width)-0.5)*2*aspectRatio,(y/float(pc.height)-0.5)*2);
    vec2 imag = c;
    for(int i = 0; i < 10000; i++){
        imag = product(imag, imag)+c;
        if(length(imag) > 2.0f){
            // o[3*(pc.width*y+x)] = 0;
            // o[3*(pc.width*y+x)+1] = 0;
            // o[3*(pc.width*y+x)+2] = 0;
            iterations = i;
            break;
        }
    }
    c = vec2((x/float(pc.width)-0.5)*2*aspectRatio,(y/float(pc.height)-0.5)*2);
    imag = c;
    if(iterations > 7000){
        for(int i = 0; i < iterations; i++){
            imag = product(imag, imag)+c;
            uint posx = uint(((imag.x/aspectRatio/2)+0.5)*float(pc.width));
            uint posy = uint(((imag.y/2)+0.5)*float(pc.height));
            atomicAdd(o[3*(pc.width*posy+posx)+0], 1.0f);
            //atomicAdd(o[3*(pc.width*posy+posx)+1], 1.0f);
            //atomicAdd(o[3*(pc.width*posy+posx)+2], 1.0f);
        }
    }

    if(iterations > 1000 && iterations < 7000){
        for(int i = 0; i < iterations; i++){
            imag = product(imag, imag)+c;
            uint posx = uint(((imag.x/aspectRatio/2)+0.5)*float(pc.width));
            uint posy = uint(((imag.y/2)+0.5)*float(pc.height));
            //atomicAdd(o[3*(pc.width*posy+posx)+0], 1.0f);
            atomicAdd(o[3*(pc.width*posy+posx)+1], 0.1f);
            //atomicAdd(o[3*(pc.width*posy+posx)+2], 1.0f);
        }
    }

    if(iterations > 30 && iterations < 1000){
        for(int i = 0; i < iterations; i++){
            imag = product(imag, imag)+c;
            uint posx = uint(((imag.x/aspectRatio/2)+0.5)*float(pc.width));
            uint posy = uint(((imag.y/2)+0.5)*float(pc.height));
            //atomicAdd(o[3*(pc.width*posy+posx)+0], 1.0f);
            //atomicAdd(o[3*(pc.width*posy+posx)+1], 1.0f);
            atomicAdd(o[3*(pc.width*posy+posx)+2], 0.5f);
        }
    }
}